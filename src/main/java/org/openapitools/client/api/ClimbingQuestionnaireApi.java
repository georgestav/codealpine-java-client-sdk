/*
 * Codealpine
 * The codealpine API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ClimbingQuestionnaire;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClimbingQuestionnaireApi {
    private ApiClient localVarApiClient;

    public ClimbingQuestionnaireApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClimbingQuestionnaireApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for climbingQuestionnaireControllerFindAll
     * @param withQuestions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerFindAllCall(String withQuestions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/climbing-questionnaire/all/{withQuestions}"
            .replaceAll("\\{" + "withQuestions" + "\\}", localVarApiClient.escapeString(withQuestions.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call climbingQuestionnaireControllerFindAllValidateBeforeCall(String withQuestions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'withQuestions' is set
        if (withQuestions == null) {
            throw new ApiException("Missing the required parameter 'withQuestions' when calling climbingQuestionnaireControllerFindAll(Async)");
        }
        

        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindAllCall(withQuestions, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param withQuestions  (required)
     * @return List&lt;ClimbingQuestionnaire&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ClimbingQuestionnaire> climbingQuestionnaireControllerFindAll(String withQuestions) throws ApiException {
        ApiResponse<List<ClimbingQuestionnaire>> localVarResp = climbingQuestionnaireControllerFindAllWithHttpInfo(withQuestions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param withQuestions  (required)
     * @return ApiResponse&lt;List&lt;ClimbingQuestionnaire&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClimbingQuestionnaire>> climbingQuestionnaireControllerFindAllWithHttpInfo(String withQuestions) throws ApiException {
        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindAllValidateBeforeCall(withQuestions, null);
        Type localVarReturnType = new TypeToken<List<ClimbingQuestionnaire>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param withQuestions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerFindAllAsync(String withQuestions, final ApiCallback<List<ClimbingQuestionnaire>> _callback) throws ApiException {

        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindAllValidateBeforeCall(withQuestions, _callback);
        Type localVarReturnType = new TypeToken<List<ClimbingQuestionnaire>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for climbingQuestionnaireControllerFindForUser
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerFindForUserCall(String authorization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/climbing-questionnaire/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call climbingQuestionnaireControllerFindForUserValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling climbingQuestionnaireControllerFindForUser(Async)");
        }
        

        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindForUserCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return List&lt;ClimbingQuestionnaire&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ClimbingQuestionnaire> climbingQuestionnaireControllerFindForUser(String authorization) throws ApiException {
        ApiResponse<List<ClimbingQuestionnaire>> localVarResp = climbingQuestionnaireControllerFindForUserWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;List&lt;ClimbingQuestionnaire&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClimbingQuestionnaire>> climbingQuestionnaireControllerFindForUserWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindForUserValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<ClimbingQuestionnaire>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerFindForUserAsync(String authorization, final ApiCallback<List<ClimbingQuestionnaire>> _callback) throws ApiException {

        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindForUserValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ClimbingQuestionnaire>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for climbingQuestionnaireControllerFindOne
     * @param id  (required)
     * @param withQuestions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerFindOneCall(String id, String withQuestions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/climbing-questionnaire/{id}/{withQuestions}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "withQuestions" + "\\}", localVarApiClient.escapeString(withQuestions.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call climbingQuestionnaireControllerFindOneValidateBeforeCall(String id, String withQuestions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling climbingQuestionnaireControllerFindOne(Async)");
        }
        
        // verify the required parameter 'withQuestions' is set
        if (withQuestions == null) {
            throw new ApiException("Missing the required parameter 'withQuestions' when calling climbingQuestionnaireControllerFindOne(Async)");
        }
        

        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindOneCall(id, withQuestions, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param withQuestions  (required)
     * @return ClimbingQuestionnaire
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ClimbingQuestionnaire climbingQuestionnaireControllerFindOne(String id, String withQuestions) throws ApiException {
        ApiResponse<ClimbingQuestionnaire> localVarResp = climbingQuestionnaireControllerFindOneWithHttpInfo(id, withQuestions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param withQuestions  (required)
     * @return ApiResponse&lt;ClimbingQuestionnaire&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClimbingQuestionnaire> climbingQuestionnaireControllerFindOneWithHttpInfo(String id, String withQuestions) throws ApiException {
        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindOneValidateBeforeCall(id, withQuestions, null);
        Type localVarReturnType = new TypeToken<ClimbingQuestionnaire>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param withQuestions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerFindOneAsync(String id, String withQuestions, final ApiCallback<ClimbingQuestionnaire> _callback) throws ApiException {

        okhttp3.Call localVarCall = climbingQuestionnaireControllerFindOneValidateBeforeCall(id, withQuestions, _callback);
        Type localVarReturnType = new TypeToken<ClimbingQuestionnaire>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for climbingQuestionnaireControllerGetAnalysisMessage
     * @param questionnaire  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerGetAnalysisMessageCall(BigDecimal questionnaire, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/climbing-questionnaire/analysis/{questionnaire}"
            .replaceAll("\\{" + "questionnaire" + "\\}", localVarApiClient.escapeString(questionnaire.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call climbingQuestionnaireControllerGetAnalysisMessageValidateBeforeCall(BigDecimal questionnaire, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'questionnaire' is set
        if (questionnaire == null) {
            throw new ApiException("Missing the required parameter 'questionnaire' when calling climbingQuestionnaireControllerGetAnalysisMessage(Async)");
        }
        

        okhttp3.Call localVarCall = climbingQuestionnaireControllerGetAnalysisMessageCall(questionnaire, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param questionnaire  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void climbingQuestionnaireControllerGetAnalysisMessage(BigDecimal questionnaire) throws ApiException {
        climbingQuestionnaireControllerGetAnalysisMessageWithHttpInfo(questionnaire);
    }

    /**
     * 
     * 
     * @param questionnaire  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> climbingQuestionnaireControllerGetAnalysisMessageWithHttpInfo(BigDecimal questionnaire) throws ApiException {
        okhttp3.Call localVarCall = climbingQuestionnaireControllerGetAnalysisMessageValidateBeforeCall(questionnaire, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param questionnaire  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerGetAnalysisMessageAsync(BigDecimal questionnaire, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = climbingQuestionnaireControllerGetAnalysisMessageValidateBeforeCall(questionnaire, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for climbingQuestionnaireControllerSaveUserQuestionnaire
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerSaveUserQuestionnaireCall(String authorization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/climbing-questionnaire/save-answers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call climbingQuestionnaireControllerSaveUserQuestionnaireValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling climbingQuestionnaireControllerSaveUserQuestionnaire(Async)");
        }
        

        okhttp3.Call localVarCall = climbingQuestionnaireControllerSaveUserQuestionnaireCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void climbingQuestionnaireControllerSaveUserQuestionnaire(String authorization) throws ApiException {
        climbingQuestionnaireControllerSaveUserQuestionnaireWithHttpInfo(authorization);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> climbingQuestionnaireControllerSaveUserQuestionnaireWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = climbingQuestionnaireControllerSaveUserQuestionnaireValidateBeforeCall(authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call climbingQuestionnaireControllerSaveUserQuestionnaireAsync(String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = climbingQuestionnaireControllerSaveUserQuestionnaireValidateBeforeCall(authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
